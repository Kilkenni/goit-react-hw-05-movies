{"version":3,"file":"static/js/cast-subpage.5bd14380.chunk.js","mappings":"+PAQMA,EAAYC,EAAAA,GAAAA,GAAH,iHAOTC,EAAWD,EAAAA,GAAAA,IAAH,mEAKC,SAASE,EAAT,GAA+B,IAAfC,EAAc,EAAdA,WACrBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoBE,EAAAA,EAAAA,GAAiB,oBAAqBF,OAASG,GAA5DC,GAAP,eAEMC,EAAe,IAAIC,EAAAA,EAAe,aAAc,CACpDC,cAAeR,EACfS,KAAM,OACNC,UAAW,KAGb,OAAQ,gCACN,iCACEL,GAAgC,IAAnBA,EAAUM,OAAe,gEAGtCN,GAAaA,EAAUM,OAAS,wBAC/BN,EAAUM,KAAKC,KAAI,SAACC,GACnB,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,KAAMC,EAA4BH,EAA5BG,UAAWC,EAAiBJ,EAAjBI,aAC7B,OAAQ,UAACrB,EAAD,WACLqB,IAAgB,SAACnB,EAAD,CAAUoB,IAAKZ,EAAaa,QAAQC,SAASH,GAAeI,IAAKN,EAAO,WAAYO,MAAM,MAAMC,OAAO,UACxH,uBAAIR,KACJ,kCAAUC,GAAuB,eAHXF,a,mHC/BjB,SAASX,EAAiBgB,EAASK,EAAUC,GAC1D,OAA0BC,EAAAA,EAAAA,eAAStB,GAAnC,eAAOuB,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,eAAStB,GAAnC,eAAO2B,EAAP,KAAcC,EAAd,KA6CA,OA3CAC,EAAAA,EAAAA,YAAU,WAER,QAAc7B,IAAVuB,EAAJ,CAIA,IAAMO,EAAa,IAAI3B,EAAAA,EAAeY,EAAS,CAC7CK,SAAUA,EACVC,SAAUA,IA8BZ,OAtCc,mCAoCdU,GAEO,WACLD,EAAWE,cAvCC,wCAWd,2FAGEN,GAAa,GAHf,kBAKuBI,EAAWG,YALlC,QAMkB,OADRC,EALV,QAOMN,EAAS,KAEFM,GAEPV,EAASU,GAXf,gDAkBIC,QAAQC,IAAI,KAAMC,SAlBtB,yBAqBMX,GAAa,GArBnB,6EAXc,yBAyCb,CAACH,EAAOR,EAASK,EAAUC,IAEvB,CAACE,EAAOE,EAAWE","sources":["components/Cast/Cast.jsx","hooks/useFetch_Id_Lang.js"],"sourcesContent":["import { useParams} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport useFetch_Id_Lang from \"hooks/useFetch_Id_Lang\";\nimport styled from \"styled-components\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\nconst ActorInfo = styled.li`\n  padding: 5px;\n  border-bottom: 1px solid black;\n  width: 50%;\n  margin-left: 10px;\n`;\n\nconst ActorPic = styled.img`\n  display: inline-block;\n  padding: 5px;\n`;\n\nexport default function Cast({ apiBaseUrl }) {\n  const { movieID } = useParams();\n  const [movieCast] = useFetch_Id_Lang(\"TMDB_movieCredits\", movieID, undefined /* language: \"en-US\" */);\n\n  const imageHandler = new TmdbApiService(\"TMDB_image\", {\n    TMDB_base_url: apiBaseUrl,\n    size: \"w185\",\n    file_path: \"\",\n  });\n\n  return (<section>\n    <h3>Cast</h3>\n    {(movieCast && movieCast.cast === 0) && <p>\n      No credits available for this movie.\n    </p>}\n    {(movieCast && movieCast.cast) && <ul>\n      {movieCast.cast.map((actor) => {\n        const { id, name, character, profile_path } = actor;\n        return (<ActorInfo key={id}>\n          {profile_path && <ActorPic src={imageHandler.handler.getImage(profile_path)} alt={name + \"'s photo\"} width=\"185\" height=\"auto\" />}\n          <p>{name}</p>\n          <p>Role: {character? character : \"Unknown\"}</p>\n        </ActorInfo>);  \n      })}\n    </ul>}\n  </section>)\n}\n\nCast.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Lang(handler, movie_id, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data === -404) {\n          setError(404);\n        }\n        else if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          //throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n        console.log(error.message);                \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();   \n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, language]);\n\n  return [state, isLoading, error]; \n}"],"names":["ActorInfo","styled","ActorPic","Cast","apiBaseUrl","movieID","useParams","useFetch_Id_Lang","undefined","movieCast","imageHandler","TmdbApiService","TMDB_base_url","size","file_path","cast","map","actor","id","name","character","profile_path","src","handler","getImage","alt","width","height","movie_id","language","useState","state","setState","isLoading","setIsLoading","error","setError","useEffect","ApiHandler","fetchFromApi","abortFetch","fetchData","data","console","log","message"],"sourceRoot":""}