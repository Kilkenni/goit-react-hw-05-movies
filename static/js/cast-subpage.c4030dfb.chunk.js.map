{"version":3,"file":"static/js/cast-subpage.c4030dfb.chunk.js","mappings":"8NAKe,SAASA,EAAT,GAA8B,EAAdC,WAAe,IACpCC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoBE,EAAAA,EAAAA,GAAiB,oBAAqBF,OAASG,GAA5DC,GAAP,eAEA,OAAQ,gCACN,iCACEA,GAAgC,IAAnBA,EAAUC,OAAe,gEAGtCD,GAAaA,EAAUC,OAAS,wBAC/BD,EAAUC,KAAKC,KAAI,SAACC,GACnB,OAAQ,2BACN,uBAAIA,EAAMC,QACV,kCAAUD,EAAME,eAFDF,EAAMG,c,mHCThB,SAASR,EAAiBS,EAASC,EAAUC,GAC1D,OAA0BC,EAAAA,EAAAA,eAASX,GAAnC,eAAOY,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KA0CA,OAxCAC,EAAAA,EAAAA,YAAU,WAER,QAAchB,IAAVY,EAAJ,CAIA,IAAMK,EAAa,IAAIC,EAAAA,EAAeV,EAAS,CAC7CC,SAAUA,EACVC,SAAUA,IA2BZ,OAnCc,mCAiCdS,GAEO,WACLF,EAAWG,cApCC,wCAWd,2FAGEL,GAAa,GAHf,kBAKuBE,EAAWI,YALlC,YAKUC,EALV,wBAQMT,EAASS,GARf,6BAWY,IAAIC,MAAJ,0BAA6BD,IAXzC,mFAkBMP,GAAa,GAlBnB,8EAXc,yBAsCb,CAACH,EAAOJ,EAASC,EAAUC,IAEvB,CAACE,EAAOE","sources":["components/Cast/Cast.jsx","hooks/useFetch_Id_Lang.js"],"sourcesContent":["import { useParams} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport useFetch_Id_Lang from \"hooks/useFetch_Id_Lang\";\n\nexport default function Cast({ apiBaseUrl }) {\n  const { movieID } = useParams();\n  const [movieCast] = useFetch_Id_Lang(\"TMDB_movieCredits\", movieID, undefined /* language: \"en-US\" */);\n\n  return (<section>\n    <h3>Cast</h3>\n    {(movieCast && movieCast.cast === 0) && <p>\n      No credits available for this movie.\n    </p>}\n    {(movieCast && movieCast.cast) && <ul>\n      {movieCast.cast.map((actor) => {\n        return (<li key={actor.id}>\n          <p>{actor.name}</p>\n          <p>Role: {actor.character}</p>\n        </li>);  \n      })}\n    </ul>}\n  </section>)\n}\n\nCast.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Lang(handler, movie_id, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n          //console.log(error.message);        \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();\n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, language]);\n\n  return [state, isLoading]; \n}"],"names":["Cast","apiBaseUrl","movieID","useParams","useFetch_Id_Lang","undefined","movieCast","cast","map","actor","name","character","id","handler","movie_id","language","useState","state","setState","isLoading","setIsLoading","useEffect","ApiHandler","TmdbApiService","fetchFromApi","abortFetch","fetchData","data","Error"],"sourceRoot":""}