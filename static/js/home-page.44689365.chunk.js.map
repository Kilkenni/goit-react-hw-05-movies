{"version":3,"file":"static/js/home-page.44689365.chunk.js","mappings":"kRAUe,SAASA,EAAT,GAAmC,IAAfC,EAAc,EAAdA,WAC/B,ECJW,SAAuBC,EAASC,GAC7C,OAA0BC,EAAAA,EAAAA,eAASC,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAyCA,OAvCAC,EAAAA,EAAAA,YAAU,WAER,QAAcL,IAAVC,EAAJ,CAIA,IAAMK,EAAa,IAAIC,EAAAA,EAAeV,EAAS,CAC7CC,KAAMA,IA2BR,OAlCc,mCAgCdU,GAEO,WACLF,EAAWG,cAnCC,wCAUd,2FAGEL,GAAa,GAHf,kBAKuBE,EAAWI,YALlC,YAKUC,EALV,wBAQMT,EAASS,GARf,6BAWY,IAAIC,MAAJ,0BAA6BD,IAXzC,mFAkBMP,GAAa,GAlBnB,8EAVc,yBAqCb,CAACH,EAAOJ,EAASC,IAEb,CAACG,EAAOE,GDvCiBU,CAAc,gBAAiB,GAA7D,eAAQC,EAAR,KAAgBX,EAAhB,KAEA,OAAQ,gCACJ,4DACA,SAACY,EAAA,EAAD,CAAeC,QAASb,EAAWc,KAAM,IAAKC,MAAQ,QACrDJ,IAAU,SAACK,EAAA,EAAD,CACPC,eAAgBN,EAAOO,QACvBzB,WAAYA,S,iEEjBxB,EAA4B,6BAA5B,EAAsE,8B,SCGvD,SAAS0B,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAqB,EAAdC,YACxC,OACE,gBAAKC,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SAAkCH,M,cCDzB,SAASJ,EAAT,GAAqD,IAA/BC,EAA8B,EAA9BA,eAAgBxB,EAAc,EAAdA,WAE7C+B,EAAe,IAAIpB,EAAAA,EAAe,aAAc,CAChDqB,cAAe,CAAChC,WAAAA,GAChBqB,KAAM,OACNY,UAAW,KAGjB,OAAQ,0BACqB,IAA1BT,EAAeU,SAAgB,2DAG/BV,EAAeW,KAAI,SAACC,GACnB,OAAQ,yBACN,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,UACE,SAACZ,EAAD,CACEC,MAAOS,EAAMT,MACbC,YAAaG,EAAa9B,QAAQsC,SAASH,EAAMR,kBAJtCQ,EAAME","sources":["components/HomePage/HomePage.jsx","hooks/useFetch_Page.js","webpack://goit-react-hw-05-movies/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx"],"sourcesContent":["//import { useState, useEffect } from \"react\";\n//import { Suspense } from \"react\";\nimport { SpinnerDotted } from \"spinners-react\";\nimport PropTypes from \"prop-types\";\n\n//import style from \"./HomePage.module.css\";\nimport MoviesList from \"../MoviesList\";\n//import { TmdbApiService } from \"../../js/TMDBApiService\";\nimport useFetch_Page from \"hooks/useFetch_Page\";\n\nexport default function HomePage({ apiBaseUrl }) {\n    const [ trends, isLoading ] = useFetch_Page(\"TMDB_trending\", 1);\n\n    return (<section>\n        <h2>Trending movies for this week:</h2>  \n        <SpinnerDotted enabled={isLoading} size={100} color={ \"red\"}/>\n        {trends && <MoviesList\n            movieDataArray={trends.results}\n            apiBaseUrl={apiBaseUrl}\n        />} \n    </section>);\n};\n\nHomePage.propTypes = {\n    apiBaseUrl: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Page(handler, page) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      page: page,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n          //console.log(error.message);        \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();\n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, page]);\n\n  return [state, isLoading]; \n}","// extracted by mini-css-extract-plugin\nexport default {\"movieCard\":\"MovieCard_movieCard__jf5v8\",\"movieTitle\":\"MovieCard_movieTitle__61Rqx\"};","import PropTypes from \"prop-types\";\n\nimport style from \"./MovieCard.module.css\";\n\nexport default function MovieCard({title, poster_path}) {\n  return (\n    <div className={style.movieCard}>\n      <h3 className={style.movieTitle}>{title}</h3>\n    </div>\n  );\n}\n\nMovieCard.propTypes = {\n  title: PropTypes.string,\n  poster_path: PropTypes.string,\n}","import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport MovieCard from \"../MovieCard\";\nimport { TmdbApiService } from \"../../js/TMDBApiService\";\n\nexport default function MoviesList({ movieDataArray, apiBaseUrl }) {\n\n  const ImageHandler = new TmdbApiService(\"TMDB_image\", {\n        TMDB_base_url: {apiBaseUrl},\n        size: \"w342\",\n        file_path: \"\",\n    });\n\n  return (<ul>\n    {movieDataArray.length === 0 && <p>\n      No movies found for this query.\n    </p>}\n    {movieDataArray.map((movie) => {\n      return (<li key={movie.id}>\n        <Link to={`/movies/${movie.id}`}>\n          <MovieCard\n            title={movie.title}\n            poster_path={ImageHandler.handler.getImage(movie.poster_path)}\n          />\n        </Link>\n      </li>);\n    })}\n  </ul>);\n}\n\nMoviesList.propTypes = {\n  movieDataArray: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n  })).isRequired,\n  apiBaseUrl: PropTypes.string.isRequired,\n}"],"names":["HomePage","apiBaseUrl","handler","page","useState","undefined","state","setState","isLoading","setIsLoading","useEffect","ApiHandler","TmdbApiService","fetchFromApi","abortFetch","fetchData","data","Error","useFetch_Page","trends","SpinnerDotted","enabled","size","color","MoviesList","movieDataArray","results","MovieCard","title","poster_path","className","style","ImageHandler","TMDB_base_url","file_path","length","map","movie","to","id","getImage"],"sourceRoot":""}