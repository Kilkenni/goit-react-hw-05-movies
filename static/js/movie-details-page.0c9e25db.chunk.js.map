{"version":3,"file":"static/js/movie-details-page.0c9e25db.chunk.js","mappings":"iPAiDA,EA1CyB,SAAC,GAAiB,EAAhBA,WAAiB,IAClCC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,GAAiB,iBAAkBF,OAASG,GAA5E,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,GAAaC,EAAAA,EAAAA,MAAcC,SAC3BC,EAAYH,EAAWI,UAAU,EAAGJ,EAAWK,QAAQX,GAAWA,EAAQY,QAE1EC,GAAWC,EAAAA,EAAAA,MAEjB,OAAQ,4BACN,mBAAQC,KAAK,SAASC,QAAS,WAAO,OAAOH,GAAU,IAAvD,sBACA,SAACI,EAAA,EAAD,CAAeC,QAASb,EAAWc,KAAM,IAAKC,MAAQ,QACrDhB,IAAa,gCACZ,wBAAKA,EAAUiB,SACf,uBAAIjB,EAAUkB,YAEd,2BACE,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKd,EAAL,SACFe,SAAO,EAFT,qBAMF,yBACE,SAAC,KAAD,CACED,GAAE,UAAKd,EAAL,YACFe,SAAO,EAFT,8BAQN,SAAC,KAAD,S,mHCjCW,SAAStB,EAAiBuB,EAASC,EAAUC,GAC1D,OAA0BC,EAAAA,EAAAA,eAASzB,GAAnC,eAAO0B,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOvB,EAAP,KAAkB0B,EAAlB,KA0CA,OAxCAC,EAAAA,EAAAA,YAAU,WAER,QAAc7B,IAAV0B,EAAJ,CAIA,IAAMI,EAAa,IAAIC,EAAAA,EAAeT,EAAS,CAC7CC,SAAUA,EACVC,SAAUA,IA2BZ,OAnCc,mCAiCdQ,GAEO,WACLF,EAAWG,cApCC,wCAWd,2FAGEL,GAAa,GAHf,kBAKuBE,EAAWI,YALlC,YAKUC,EALV,wBAQMR,EAASQ,GARf,6BAWY,IAAIC,MAAJ,0BAA6BD,IAXzC,mFAkBMP,GAAa,GAlBnB,8EAXc,yBAsCb,CAACF,EAAOJ,EAASC,EAAUC,IAEvB,CAACE,EAAOxB","sources":["components/MovieDetailsPage/MovieDetailsPage.jsx","hooks/useFetch_Id_Lang.js"],"sourcesContent":["import { useParams, useLocation, Outlet, Link, useNavigate } from \"react-router-dom\";\nimport { SpinnerDotted } from \"spinners-react\";\nimport PropTypes from \"prop-types\";\n//import { useState, useEffect } from \"react\";\n\nimport useFetch_Id_Lang from \"hooks/useFetch_Id_Lang\";\n\nconst MovieDetailsPage = ({apiBaseUrl}) => {\n  const { movieID } = useParams();\n  const [movieData, isLoading ] = useFetch_Id_Lang(\"TMDB_movieData\", movieID, undefined /* language: \"en-US\" */ ); \n\n  const currentLoc = useLocation().pathname;\n  const moviePath = currentLoc.substring(0, currentLoc.indexOf(movieID) + movieID.length);\n\n  const navigate = useNavigate();\n\n  return (<div>\n    <button type=\"button\" onClick={() => {return navigate(-1)}}>Go back</button>\n    <SpinnerDotted enabled={isLoading} size={100} color={ \"red\"}/>\n    {movieData && <section>\n      <h2>{movieData.title}</h2>\n      <p>{movieData.overview}</p>\n      \n      <ul>\n        <li>\n          <Link\n            to={`${moviePath}/cast`}\n            replace\n          >Cast</Link>\n        </li>\n\n        <li>\n          <Link\n            to={`${moviePath}/reviews`}\n            replace\n          >Reviews</Link>\n        </li>\n      </ul>\n    </section>}\n\n    <Outlet />\n    \n  </div>);\n}\n\nMovieDetailsPage.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n}\n\nexport default MovieDetailsPage;","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Lang(handler, movie_id, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n          //console.log(error.message);        \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();\n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, language]);\n\n  return [state, isLoading]; \n}"],"names":["apiBaseUrl","movieID","useParams","useFetch_Id_Lang","undefined","movieData","isLoading","currentLoc","useLocation","pathname","moviePath","substring","indexOf","length","navigate","useNavigate","type","onClick","SpinnerDotted","enabled","size","color","title","overview","to","replace","handler","movie_id","language","useState","state","setState","setIsLoading","useEffect","ApiHandler","TmdbApiService","fetchFromApi","abortFetch","fetchData","data","Error"],"sourceRoot":""}