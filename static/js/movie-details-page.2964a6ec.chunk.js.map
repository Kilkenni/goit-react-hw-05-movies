{"version":3,"file":"static/js/movie-details-page.2964a6ec.chunk.js","mappings":"iPAoDA,EA5CyB,SAAC,GAAiB,EAAhBA,WAAiB,IAClCC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,GAAiB,iBAAkBF,OAASG,GAAlF,eAAOC,EAAP,KAAkBC,EAAlB,KAA6BC,EAA7B,KAEMC,GAAaC,EAAAA,EAAAA,MAAcC,SAC3BC,EAAYH,EAAWI,UAAU,EAAGJ,EAAWK,QAAQZ,GAAWA,EAAQa,QAE1EC,GAAWC,EAAAA,EAAAA,MAEjB,OAAQ,4BACN,mBAAQC,KAAK,SAASC,QAAS,WAAQ,OAAOH,GAAU,IAAxD,qBACW,MAAVR,IAAiB,SAAC,KAAD,CAAUY,GAAG,IAAIC,SAAS,KAE5C,SAACC,EAAA,EAAD,CAAeC,QAAShB,EAAWiB,KAAM,IAAKC,MAAQ,QACrDnB,IAAa,gCACZ,wBAAKA,EAAUoB,SACf,uBAAIpB,EAAUqB,YAEd,2BACE,yBACE,SAAC,KAAD,CACEP,GAAE,UAAKR,EAAL,SACFS,SAAO,EAFT,qBAMF,yBACE,SAAC,KAAD,CACED,GAAE,UAAKR,EAAL,YACFS,SAAO,EAFT,8BAQN,SAAC,KAAD,S,mHCpCW,SAASjB,EAAiBwB,EAASC,EAAUC,GAC1D,OAA0BC,EAAAA,EAAAA,eAAS1B,GAAnC,eAAO2B,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOxB,EAAP,KAAkB2B,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,eAAS1B,GAAnC,eAAOG,EAAP,KAAc2B,EAAd,KA6CA,OA3CAC,EAAAA,EAAAA,YAAU,WAER,QAAc/B,IAAV2B,EAAJ,CAIA,IAAMK,EAAa,IAAIC,EAAAA,EAAeV,EAAS,CAC7CC,SAAUA,EACVC,SAAUA,IA8BZ,OAtCc,mCAoCdS,GAEO,WACLF,EAAWG,cAvCC,wCAWd,2FAGEN,GAAa,GAHf,kBAKuBG,EAAWI,YALlC,QAMkB,OADRC,EALV,QAOMP,EAAS,KAEFO,GAEPT,EAASS,GAXf,gDAkBIC,QAAQC,IAAI,KAAMC,SAlBtB,yBAqBMX,GAAa,GArBnB,6EAXc,yBAyCb,CAACF,EAAOJ,EAASC,EAAUC,IAEvB,CAACE,EAAOzB,EAAWC","sources":["components/MovieDetailsPage/MovieDetailsPage.jsx","hooks/useFetch_Id_Lang.js"],"sourcesContent":["import { useParams, useLocation, Outlet, Link, useNavigate, Navigate } from \"react-router-dom\";\nimport { SpinnerDotted } from \"spinners-react\";\nimport PropTypes from \"prop-types\";\n//import { useEffect } from \"react\";\n\nimport useFetch_Id_Lang from \"hooks/useFetch_Id_Lang\";\n\n\nconst MovieDetailsPage = ({apiBaseUrl}) => {\n  const { movieID } = useParams();\n  const [movieData, isLoading, error] = useFetch_Id_Lang(\"TMDB_movieData\", movieID, undefined /* language: \"en-US\" */);\n\n  const currentLoc = useLocation().pathname;\n  const moviePath = currentLoc.substring(0, currentLoc.indexOf(movieID) + movieID.length);\n\n  const navigate = useNavigate();\n\n  return (<div>\n    <button type=\"button\" onClick={() => { return navigate(-1) }}>Go back</button>\n    {error === 404 && <Navigate to=\"/\" replace={true} />}\n\n    <SpinnerDotted enabled={isLoading} size={100} color={ \"red\"}/>\n    {movieData && <section>\n      <h2>{movieData.title}</h2>\n      <p>{movieData.overview}</p>\n      \n      <ul>\n        <li>\n          <Link\n            to={`${moviePath}/cast`}\n            replace\n          >Cast</Link>\n        </li>\n\n        <li>\n          <Link\n            to={`${moviePath}/reviews`}\n            replace\n          >Reviews</Link>\n        </li>\n      </ul>\n    </section>}\n\n    <Outlet />\n    \n  </div>);\n}\n\nMovieDetailsPage.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n}\n\nexport default MovieDetailsPage;","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Lang(handler, movie_id, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data === -404) {\n          setError(404);\n        }\n        else if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          //throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n        console.log(error.message);                \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();   \n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, language]);\n\n  return [state, isLoading, error]; \n}"],"names":["apiBaseUrl","movieID","useParams","useFetch_Id_Lang","undefined","movieData","isLoading","error","currentLoc","useLocation","pathname","moviePath","substring","indexOf","length","navigate","useNavigate","type","onClick","to","replace","SpinnerDotted","enabled","size","color","title","overview","handler","movie_id","language","useState","state","setState","setIsLoading","setError","useEffect","ApiHandler","TmdbApiService","fetchFromApi","abortFetch","fetchData","data","console","log","message"],"sourceRoot":""}