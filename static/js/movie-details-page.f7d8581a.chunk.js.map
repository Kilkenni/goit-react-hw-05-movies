{"version":3,"file":"static/js/movie-details-page.f7d8581a.chunk.js","mappings":"sRAYMA,EAAaC,EAAAA,GAAAA,IAAH,8HAOVC,EAAcD,EAAAA,GAAAA,IAAH,mEAKXE,EAAiBF,EAAAA,GAAAA,IAAH,0EAKdG,EAAaH,EAAAA,GAAAA,GAAH,4CAKVI,EAAqBJ,EAAAA,GAAAA,IAAW,CACpCK,UAAW,kBACXC,aAAc,kBACdC,QAAS,SAgFX,EA1EyB,SAAC,GAA+B,IAenDC,EAAOC,EAAQC,EAAUC,EAAaC,EAfjBC,EAA6B,EAA7BA,WACjBC,GAD8C,EAAjBC,aACjBC,EAAAA,EAAAA,MAAZF,SACR,GAAsCG,EAAAA,EAAAA,GAAiB,iBAAkBH,OAASI,GAAlF,eAAOC,EAAP,KAAkBC,EAAlB,KAA6BC,EAA7B,KAEMC,GAAaC,EAAAA,EAAAA,MAAcC,SAC3BC,EAAYH,EAAWI,UAAU,EAAGJ,EAAWK,QAAQb,GAAWA,EAAQc,QAE1EC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,IAAIC,EAAAA,EAAe,aAAc,CACpDC,cAAepB,EACfqB,KAAM,OACNC,UAAW,KAQb,OAJIhB,IACCX,EAAsDW,EAAtDX,MAAOC,EAA+CU,EAA/CV,OAAQC,EAAuCS,EAAvCT,SAAUC,EAA6BQ,EAA7BR,YAAaC,EAAgBO,EAAhBP,eAGnC,4BACN,mBAAQwB,KAAK,SAASC,QAAS,WAAQ,OAAOR,GAAU,IAAxD,qBACW,MAAVR,IAAiB,SAAC,KAAD,CAAUiB,GAAG,IAAIC,SAAS,KAE5C,SAACC,EAAA,EAAD,CAAeC,QAASrB,EAAWc,KAAM,IAAKQ,MAAQ,QACrDvB,IAAa,gCACZ,UAACpB,EAAD,WACGY,IAAe,SAACV,EAAD,CAAa0C,IAAKZ,EAAaa,QAAQC,SAASlC,GAAcmC,IAAG,qBAAgBtC,GAASuC,MAAM,MAAMC,OAAO,UAC7H,UAAC9C,EAAD,YACE,SAACC,EAAD,UAAaK,KACb,wCAAgC,GAAfI,EAAjB,QACA,sCACA,uBAAIF,GAAsB,4BAC1B,oCACA,uBAAID,EAASA,EAAOwC,KAAI,SAACC,GACvB,OAAOA,EAAMC,QACZC,KAAK,MACN,gDAIN,UAAChD,EAAD,YACE,oDACA,2BACE,yBACE,SAAC,KAAD,CACEkC,GAAE,UAAKb,EAAL,SACFc,SAAO,EAFT,qBAMF,yBACE,SAAC,KAAD,CACED,GAAE,UAAKb,EAAL,YACFc,SAAO,EAFT,iCASR,SAAC,KAAD,S,mHCjGW,SAAStB,EAAiB2B,EAASS,EAAUC,GAC1D,OAA0BC,EAAAA,EAAAA,eAASrC,GAAnC,eAAOsC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOnC,EAAP,KAAkBsC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,eAASrC,GAAnC,eAAOG,EAAP,KAAcsC,EAAd,KA6CA,OA3CAC,EAAAA,EAAAA,YAAU,WAER,QAAc1C,IAAVsC,EAAJ,CAIA,IAAMK,EAAa,IAAI7B,EAAAA,EAAeY,EAAS,CAC7CS,SAAUA,EACVC,SAAUA,IA8BZ,OAtCc,mCAoCdQ,GAEO,WACLD,EAAWE,cAvCC,wCAWd,2FAGEL,GAAa,GAHf,kBAKuBG,EAAWG,YALlC,QAMkB,OADRC,EALV,QAOMN,EAAS,KAEFM,GAEPR,EAASQ,GAXf,gDAkBIC,QAAQC,IAAI,KAAMC,SAlBtB,yBAqBMV,GAAa,GArBnB,6EAXc,yBAyCb,CAACF,EAAOZ,EAASS,EAAUC,IAEvB,CAACE,EAAOpC,EAAWC","sources":["components/MovieDetailsPage/MovieDetailsPage.jsx","hooks/useFetch_Id_Lang.js"],"sourcesContent":["import { useParams, useLocation, Outlet, Link, useNavigate, Navigate } from \"react-router-dom\";\nimport { SpinnerDotted } from \"spinners-react\";\nimport PropTypes from \"prop-types\";\n//import { useEffect } from \"react\";\n\nimport styled from \"styled-components\";\n\nimport useFetch_Id_Lang from \"hooks/useFetch_Id_Lang\";\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n/* Styles for components */\n\nconst MovieBlock = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: flex-start;\n`;\n\nconst MoviePoster = styled.img`\n  display: inline-block;\n  padding: 5px;\n`;\n\nconst MovieInfoBlock = styled.div`\n  display: inline-block;\n  vertical-align: top;\n`;\n\nconst MovieTitle = styled.h2`\n  font-size: 30px;\n`;\n\n// let's try with an object as well for practice\nconst MovieSublinksBlock = styled.div({\n  borderTop: \"1px solid black\",\n  borderBottom: \"1px solid black\",\n  padding: \"10px\",\n});\n\n/* Page view */\n\n  \nconst MovieDetailsPage = ({apiBaseUrl, genresArray}) => {\n  const { movieID } = useParams();\n  const [movieData, isLoading, error] = useFetch_Id_Lang(\"TMDB_movieData\", movieID, undefined /* language: \"en-US\" */);\n\n  const currentLoc = useLocation().pathname;\n  const moviePath = currentLoc.substring(0, currentLoc.indexOf(movieID) + movieID.length);\n\n  const navigate = useNavigate();\n\n  const imageHandler = new TmdbApiService(\"TMDB_image\", {\n    TMDB_base_url: apiBaseUrl,\n    size: \"w342\",\n    file_path: \"\",\n  });\n\n  let title, genres, overview, poster_path, vote_average;\n  if (movieData) {\n    ({ title, genres, overview, poster_path, vote_average} = movieData);\n  }\n  \n  return (<div>\n    <button type=\"button\" onClick={() => { return navigate(-1) }}>Go back</button>\n    {error === 404 && <Navigate to=\"/\" replace={true} />}\n\n    <SpinnerDotted enabled={isLoading} size={100} color={ \"red\"}/>\n    {movieData && <section>\n      <MovieBlock>\n        {poster_path && <MoviePoster src={imageHandler.handler.getImage(poster_path)} alt={`Poster for ${title}`} width=\"342\" height=\"auto\" />}\n        <MovieInfoBlock>\n          <MovieTitle>{title}</MovieTitle>\n          <p>User score: { vote_average * 10}%</p>\n          <h3>Overview</h3>\n          <p>{overview ? overview : \"No overview available.\"}</p>\n          <h3>Genres</h3>\n          <p>{genres ? genres.map((genre) => {\n            return genre.name;\n          }).join(\", \")       \n          : \"No genres available in the database.\"}</p>\n        </MovieInfoBlock>\n      </MovieBlock>\n      \n      <MovieSublinksBlock>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link\n              to={`${moviePath}/cast`}\n              replace\n            >Cast</Link>\n          </li>\n\n          <li>\n            <Link\n              to={`${moviePath}/reviews`}\n              replace\n            >Reviews</Link>\n          </li>\n        </ul>\n      </MovieSublinksBlock>     \n    </section>}\n\n    <Outlet />\n    \n  </div>);\n}\n\nMovieDetailsPage.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n  genresArray: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n  } )),\n}\n\nexport default MovieDetailsPage;","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Lang(handler, movie_id, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data === -404) {\n          setError(404);\n        }\n        else if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          //throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n        console.log(error.message);                \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();   \n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, language]);\n\n  return [state, isLoading, error]; \n}"],"names":["MovieBlock","styled","MoviePoster","MovieInfoBlock","MovieTitle","MovieSublinksBlock","borderTop","borderBottom","padding","title","genres","overview","poster_path","vote_average","apiBaseUrl","movieID","genresArray","useParams","useFetch_Id_Lang","undefined","movieData","isLoading","error","currentLoc","useLocation","pathname","moviePath","substring","indexOf","length","navigate","useNavigate","imageHandler","TmdbApiService","TMDB_base_url","size","file_path","type","onClick","to","replace","SpinnerDotted","enabled","color","src","handler","getImage","alt","width","height","map","genre","name","join","movie_id","language","useState","state","setState","setIsLoading","setError","useEffect","ApiHandler","fetchFromApi","abortFetch","fetchData","data","console","log","message"],"sourceRoot":""}