{"version":3,"file":"static/js/movies-page.ad301c4c.chunk.js","mappings":"mLACA,EAA4B,6BAA5B,EAAsE,8B,SCGvD,SAASA,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAqB,EAAdC,YACxC,OACE,gBAAKC,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SAAkCH,M,cCDzB,SAASI,EAAT,GAAqD,IAA/BC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAE7CC,EAAe,IAAIC,EAAAA,EAAe,aAAc,CAChDC,cAAe,CAACH,WAAAA,GAChBI,KAAM,OACNC,UAAW,KAGjB,OAAQ,0BACqB,IAA1BN,EAAeO,SAAgB,2DAG/BP,EAAeQ,KAAI,SAACC,GACnB,OAAQ,yBACN,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,UACE,SAACjB,EAAD,CACEC,MAAOc,EAAMd,MACbC,YAAaM,EAAaU,QAAQC,SAASJ,EAAMb,kBAJtCa,EAAME,Y,2JCTd,SAASG,EAAT,GAAqC,IAAfb,EAAc,EAAdA,WACnC,GAAsCc,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA0CL,EAAAA,EAAAA,eAASM,GAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAOL,EAAaM,IAAI,QACxBC,EAAQP,EAAaM,IAAI,UAE/BE,EAAAA,EAAAA,YAAU,WAER,GAAKD,GAA0B,IAAjBA,EAAMnB,OAApB,CAIA,IAAMqB,EAAa,IAAIzB,EAAAA,EAAe,cAAe,CACnD0B,YAAaH,EACbF,KAAMA,IAaR,OArBc,mCAmBdM,GAEO,WACHF,EAAWG,cAtBD,wCAWd,oGACuBH,EAAWI,YADlC,QACUC,EADV,SAIQV,EAAiBU,GAJzB,4CAXc,yBAwBb,CAACP,EAAOF,IAmBX,OACI,gCACE,kBAAMU,OAAO,SAASC,SAnBR,SAACC,GACnBA,EAAMC,iBACN,IACMX,EADW,IAAIY,SAASF,EAAMG,QACbd,IAAI,gBACN,IAAjBC,EAAMnB,SAIVU,EAAe,IACXE,GAAgBO,IAAUP,EAAaM,IAAI,UAI/CL,EAAgB,CAAEM,MAAAA,MAMd,WACE,kBACEc,KAAK,OACLC,KAAK,eACLC,MAAO1B,EACP2B,SAAU,SAACP,GAAD,OAAWnB,EAAemB,EAAMG,OAAOG,WAEnD,mBAAQF,KAAK,SAAb,uBAGDlB,IAAiB,SAACvB,EAAA,EAAD,CAChBC,eAAgBsB,EAAcsB,QAC9B3C,WAAYA","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/MoviesPage/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieCard\":\"MovieCard_movieCard__jf5v8\",\"movieTitle\":\"MovieCard_movieTitle__61Rqx\"};","import PropTypes from \"prop-types\";\n\nimport style from \"./MovieCard.module.css\";\n\nexport default function MovieCard({title, poster_path}) {\n  return (\n    <div className={style.movieCard}>\n      <h3 className={style.movieTitle}>{title}</h3>\n    </div>\n  );\n}\n\nMovieCard.propTypes = {\n  title: PropTypes.string,\n  poster_path: PropTypes.string,\n}","import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport MovieCard from \"../MovieCard\";\nimport { TmdbApiService } from \"../../js/TMDBApiService\";\n\nexport default function MoviesList({ movieDataArray, apiBaseUrl }) {\n\n  const ImageHandler = new TmdbApiService(\"TMDB_image\", {\n        TMDB_base_url: {apiBaseUrl},\n        size: \"w342\",\n        file_path: \"\",\n    });\n\n  return (<ul>\n    {movieDataArray.length === 0 && <p>\n      No movies found for this query.\n    </p>}\n    {movieDataArray.map((movie) => {\n      return (<li key={movie.id}>\n        <Link to={`/movies/${movie.id}`}>\n          <MovieCard\n            title={movie.title}\n            poster_path={ImageHandler.handler.getImage(movie.poster_path)}\n          />\n        </Link>\n      </li>);\n    })}\n  </ul>);\n}\n\nMoviesList.propTypes = {\n  movieDataArray: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n  })).isRequired,\n  apiBaseUrl: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport { TmdbApiService } from \"../../js/TMDBApiService\";\n//import useFetchFromApi from \"hooks/useFetchFromApi\";\nimport MoviesList from \"../MoviesList\";\n//import style from \"./MoviesPage.module.css\"\n\n\nexport default function MoviesPage({ apiBaseUrl }) {\n  const [inputString, setInputString] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [searchResults, setSearchResults] = useState(undefined);\n\n  const page = searchParams.get(\"page\");\n  const query = searchParams.get(\"query\");\n \n  useEffect(() => {\n    //we do not search for empty query\n    if (!query || query.length === 0) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(\"TMDB_search\", {\n      queryString: query,\n      page: page,\n    });\n\n    async function fetchFromApi() {  \n        const data = await ApiHandler.fetchData();\n        if (data) {\n            //console.log(data)\n            setSearchResults(data);\n        }        \n    }\n\n    fetchFromApi();\n\n    return function abortFetch() {\n        ApiHandler.abortFetch();\n    }      \n  }, [query, page]);\n\n  const onNewSearch = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const query = formData.get(\"searchString\");\n    if (query.length === 0) {\n      return;\n    }\n\n    setInputString(\"\");\n    if (searchParams && query === searchParams.get(\"query\")) {\n      return;\n    }\n\n    setSearchParams({ query });\n    //setSearchString(formData.get(\"searchString\"));      \n  }\n\n  return ( \n      <section>\n        <form action=\"submit\" onSubmit={onNewSearch}>\n          <input\n            type=\"text\"\n            name=\"searchString\"\n            value={inputString}\n            onChange={(event) => setInputString(event.target.value)}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        {searchResults && <MoviesList\n          movieDataArray={searchResults.results}\n          apiBaseUrl={apiBaseUrl}\n        />}\n        \n      </section>\n\n  );\n}\n\nMoviesPage.propTypes = {\n    apiBaseUrl: PropTypes.string.isRequired,\n}"],"names":["MovieCard","title","poster_path","className","style","MoviesList","movieDataArray","apiBaseUrl","ImageHandler","TmdbApiService","TMDB_base_url","size","file_path","length","map","movie","to","id","handler","getImage","MoviesPage","useState","inputString","setInputString","useSearchParams","searchParams","setSearchParams","undefined","searchResults","setSearchResults","page","get","query","useEffect","ApiHandler","queryString","fetchFromApi","abortFetch","fetchData","data","action","onSubmit","event","preventDefault","FormData","target","type","name","value","onChange","results"],"sourceRoot":""}