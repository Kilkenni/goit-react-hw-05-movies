{"version":3,"file":"static/js/reviews-subpage.51fc13e7.chunk.js","mappings":"yQAKe,SAASA,EAAT,GAAiC,EAAdC,WAAe,IAE/C,ECAa,SAA+BC,EAASC,EAAUC,EAAMC,GACrE,OAA0BC,EAAAA,EAAAA,eAASC,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KA2CA,OAzCAC,EAAAA,EAAAA,YAAU,WAER,QAAcL,IAAVC,EAAJ,CAIA,IAAMK,EAAa,IAAIC,EAAAA,EAAeZ,EAAS,CAC7CC,SAAUA,EACVC,KAAMA,EACNC,SAAUA,IA2BZ,OApCc,mCAkCdU,GAEO,WACLF,EAAWG,cArCC,wCAYd,2FAGEL,GAAa,GAHf,kBAKuBE,EAAWI,YALlC,YAKUC,EALV,wBAQMT,EAASS,GARf,6BAWY,IAAIC,MAAJ,0BAA6BD,IAXzC,mFAkBMP,GAAa,GAlBnB,8EAZc,yBAuCb,CAACH,EAAON,EAASC,EAAUC,EAAMC,IAE7B,CAACG,EAAOE,GD7CQU,CAAsB,qBADzBC,EAAAA,EAAAA,MAAZC,QACmE,OAAGf,GAAvEgB,GAAP,eAEA,OAAQ,gCACN,oCACEA,GAAgD,IAAhCA,EAAaC,QAAQC,SAAiB,gEAGtDF,GAAgBA,EAAaC,UAAY,wBACxCD,EAAaC,QAAQE,KAAI,SAACC,GACzB,OAAQ,2BACN,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFIF,EAAOG","sources":["components/Reviews/Reviews.jsx","hooks/useFetch_Id_Page_Lang.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport useFetch_Id_Page_Lang from \"hooks/useFetch_Id_Page_Lang\";\n\nexport default function Reviews({ apiBaseUrl }) {\n  const { movieID } = useParams();\n  const [movieReviews] = useFetch_Id_Page_Lang(\"TMDB_movieReviews\", movieID, 1, undefined /* language: \"en-US\" */ );\n\n  return (<section>\n    <h3>Reviews</h3>\n    {(movieReviews && movieReviews.results.length === 0) && <p>\n      No reviews available for this movie.\n    </p>}\n    {(movieReviews && movieReviews.results) && <ul>\n      {movieReviews.results.map((review) => {\n        return (<li key={review.id}>\n          <h4>Author: {review.author}</h4>\n          <p>{review.content}</p>\n        </li>);  \n      })}\n    </ul>}\n  </section>)\n}\n\nReviews.propTypes = {\n  apiBaseUrl: PropTypes.string.isRequired,\n}","import { useState, useEffect } from \"react\";\n\nimport { TmdbApiService } from \"js/TMDBApiService\";\n\n//Custom hook for fetching data from TMDB (except config!)\n//for acceptable handlers and parameters see TMDBApiService\n\nexport default function useFetch_Id_Page_Lang(handler, movie_id, page, language) {\n  const [state, setState] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    //do once\n    if (state !== undefined) {\n      return;\n    }\n\n    const ApiHandler = new TmdbApiService(handler, {\n      movie_id: movie_id,\n      page: page,\n      language: language,\n    });\n\n    async function fetchFromApi() {\n      //console.log(ApiHandler.toString())\n\n      setIsLoading(true);\n      try {\n        const data = await ApiHandler.fetchData();\n        if (data) {\n          //console.log(data)\n          setState(data);\n        }\n        else {\n          throw new Error(`Fetched data is ${data}`);\n        }\n      }\n      catch (error) {\n          //console.log(error.message);        \n      }      \n      finally {\n          setIsLoading(false);\n      }\n    }\n\n    fetchFromApi();\n\n    return function abortFetch() {\n      ApiHandler.abortFetch();\n    }\n  }, [state, handler, movie_id, page, language]);\n\n  return [state, isLoading]; \n}"],"names":["Reviews","apiBaseUrl","handler","movie_id","page","language","useState","undefined","state","setState","isLoading","setIsLoading","useEffect","ApiHandler","TmdbApiService","fetchFromApi","abortFetch","fetchData","data","Error","useFetch_Id_Page_Lang","useParams","movieID","movieReviews","results","length","map","review","author","content","id"],"sourceRoot":""}